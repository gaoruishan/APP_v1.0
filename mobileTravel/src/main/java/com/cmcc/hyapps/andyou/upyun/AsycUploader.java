/** * com.upyun.api Upload.java */package com.cmcc.hyapps.andyou.upyun;import android.content.Context;import android.text.TextUtils;import android.util.Log;import com.loopj.android.http.AsyncHttpClient;import com.loopj.android.http.AsyncHttpResponseHandler;import com.loopj.android.http.RequestParams;import com.cmcc.hyapps.andyou.app.ServerAPI;import com.cmcc.hyapps.andyou.model.QHToken;import com.cmcc.hyapps.andyou.util.AppUtils;import org.apache.http.Header;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpPost;import org.apache.http.entity.FileEntity;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.util.EntityUtils;import java.io.File;import java.util.List;//import org.apache.http.entity.mime.HttpMultipartMode;//import org.apache.http.entity.mime.MultipartEntity;//import org.apache.http.entity.mime.content.ContentBody;//import org.apache.http.entity.mime.content.FileBody;//import org.apache.http.entity.mime.content.StringBody;//import org.apache.http.entity.mime.content.StringBody;//import com.fenlibox.constant.Constantparams;//import com.fenlibox.constant.UserConstant;/** * Upload.java *  * @author vincent chen * @since 2012 Jun 18, 2012 4:52:49 PM */public class AsycUploader {	public static String upload(Context mContext, List<File> imgFiles,String content,int object_id,int ctype)throws UpYunException {		String returnStr = null;        postFile(ServerAPI.User.buildWriteCommentUrl(),imgFiles.get(0),mContext);//		HttpClient httpclient = new DefaultHttpClient();        AsyncHttpClient httpclient = new AsyncHttpClient();        RequestParams params = new RequestParams();        params.put("Accept-Language","zh-cn,zh;q=0.5");        params.put("Accept-Charset","GBK,utf-8;q=0.7,*;q=0.7");        params.put("Content-Type", "multipart/form-data");        QHToken tokenInfo = AppUtils.getQHToken(mContext);        if (tokenInfo != null && !TextUtils.isEmpty(tokenInfo.token)) {           // params.put("Authorization", "JWT " + tokenInfo.token);            params.put("Authorization", tokenInfo.token);        }        httpclient.post(mContext,ServerAPI.User.buildWriteCommentUrl(),params,new AsyncHttpResponseHandler() {            @Override            public void onSuccess(int statusCode, Header[] headers, byte[] responseBody) {                Log.i("law",responseBody.toString());            }            @Override            public void onFailure(int statusCode, Header[] headers, byte[] responseBody, Throwable error) {            }        });//		try {//            httppost.setHeader("Accept-Language","zh-cn,zh;q=0.5");//            httppost.setHeader("Accept-Charset","GBK,utf-8;q=0.7,*;q=0.7");//            httppost.setHeader("Connection","keep-alive");//            httppost.setHeader("Content-Type", "multipart/form-data");//            QHToken tokenInfo = AppUtils.getQHToken(mContext);//            if (tokenInfo != null && !TextUtils.isEmpty(tokenInfo.token)) {//                httppost.addHeader("Authorization", "JWT " + tokenInfo.token);//            }//            MultipartEntity sme = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);//            ContentBody con = new StringBody(content);//            ContentBody id = new StringBody(String.valueOf(object_id));//            ContentBody type = new StringBody(String.valueOf(ctype));//            sme.addPart("content", con);//            sme.addPart("object_id", id);//            sme.addPart("ctype", type);////////////////            httppost.setEntity(sme);//			HttpResponse response = httpclient.execute(httppost);//			StatusLine statusLine = response.getStatusLine();//			int code = statusLine.getStatusCode();//			String str = EntityUtils.toString(response.getEntity());//            Log.e("++++++++++++", "str:" + str);//			if (code != HttpStatus.SC_OK) {//				JSONObject obj = new JSONObject(str);//				String msg = obj.getString("message");////				msg = new String(msg.getBytes("UTF-8"), "UTF-8");////				String url = obj.getString("url");//				long time = obj.getLong("time");//				boolean isSigned = false;//				String signString = "";//				if (!obj.isNull("sign")) {//					signString = obj.getString("sign");//					isSigned = true;//				} else if (!obj.isNull("non-sign")) {//					signString = obj.getString("non-sign");//					isSigned = false;//				}//				UpYunException exception = new UpYunException(code, msg);//				exception.isSigned = isSigned;//				exception.url = url;//				exception.time = time;//				exception.signString = signString;//				throw exception;////			} else {////				JSONObject obj = new JSONObject(str);//				returnStr = str;////			}//		} catch (ClientProtocolException e) {//			e.printStackTrace();//			throw new UpYunException(30, e.getMessage());//		} catch (IOException e) {//			e.printStackTrace();//			throw new UpYunException(31, e.getMessage());//		} catch (OutOfMemoryError e) {//			e.printStackTrace();//			throw new UpYunException(33, e.getMessage());//		} catch (JSONException e) {//			throw new UpYunException(32, e.getMessage());//		}		return returnStr;	}    private static void postFile(String url,File file,Context mContext) {        HttpClient httpClient = new DefaultHttpClient();        HttpPost httpPost = new HttpPost(url);        try {            File uploadFile = new File(file.getPath());            //定义FileEntity对象            HttpEntity entity = new FileEntity(uploadFile,"binary/octet-stream");            //为httpPost设置头信息//            httpPost.setHeader("filename", URLEncoder.encode(fileName,"utf-8"));//服务器可以读取到该文件名            httpPost.setHeader("Content-Length", String.valueOf(entity.getContentLength()));//设置传输长度            httpPost.setHeader("Content-Type", "multipart/form-data");            QHToken tokenInfo = AppUtils.getQHToken(mContext);            if (tokenInfo != null && !TextUtils.isEmpty(tokenInfo.token)) {             //   httpPost.addHeader("Authorization", "JWT " + tokenInfo.token);                httpPost.addHeader("Authorization",  tokenInfo.token);            }            httpPost.setEntity(entity); //设置实体对象            // httpClient执行httpPost提交            HttpResponse response = httpClient.execute(httpPost);            // 得到服务器响应实体对象            HttpEntity responseEntity = response.getEntity();            if (responseEntity != null) {                String str = EntityUtils.toString(responseEntity, "utf-8");                Log.e("++++++++++++",str);            } else {                System.out.println("服务器无响应！");            }        } catch (Exception e) {            e.printStackTrace();        } finally {            // 释放资源            httpClient.getConnectionManager().shutdown();        }    }}